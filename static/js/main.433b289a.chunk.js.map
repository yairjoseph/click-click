{"version":3,"sources":["components/Jumbotron.js","components/Picture.js","components/Game.js","components/App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","style","color","href","fontSize","score","topScore","Picture","src","image","id","alt","Game","console","log","data","friends","map","indexOf","onClick","shuffle","components_Picture","name","link","App","state","picked","Friend","event","target","_this","setState","concat","this","newFriends","i","length","j","Math","floor","random","_ref","components_Jumbotron","components_Game","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.433b289a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Jumbotron = (props) => {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\"><a style={{color:\"black\"}}href=\"/click-click\">Clicky Game</a></h1>\n                <p className=\"lead\">Click the image to gain points towards your new high score, if you click the same image twice your score will reset! Lets Go!</p>\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item nav-score\">\n                        <div className=\"nav-link\" style={{fontSize:30}}>Score: {props.score} | Top Score: {props.topScore}</div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nconst Picture = (props) => {\n// console.log(props)\n    return (\n\n        <div className=\"card card-style\">\n            <img className=\"card-img-top\" src={props.image} id= {props.id} alt=\"game-img\"  />\n        </div>\n\n    )\n}\n\nexport default Picture;\n// style={{ maxWidth: \"200px\", maxHeight: \"200px\", margin: \"30px\", borderRadius:20, padding:10}}\n// style={{ width:\"150px\", cursor: \"pointer\"}}","import React from \"react\";\nimport Picture from \"./Picture\";\n\n\nconst Game = (props) => {\n\n    console.log(props)\n    return (\n        <div className='container'>\n            <div className='row'>\n                {props.data.friends.map(friends => {\n                    if (props.data.friends.indexOf(friends) < 4) {\n                        return (\n                            <div onClick={props.shuffle} className =\"image-center\">\n\n                                <Picture\n                                    id={friends.id}\n                                    name={friends.name}\n                                    image={friends.link}\n                                />\n                            </div>\n                        )\n                    }\n                }\n                )}\n            </div>\n            <div className=\"row\">\n                {props.data.friends.map(friends => {\n                    if (props.data.friends.indexOf(friends) < 8 && props.data.friends.indexOf(friends) > 3) {\n                        return (\n                            <div onClick={props.shuffle} className =\"image-center\">\n                                <Picture\n                                    id={friends.id}\n                                    name={friends.name}\n                                    image={friends.link}\n                                />\n                            </div>\n                        )\n                    }\n                }\n                )}\n            </div>\n            <div className='row'>\n                {props.data.friends.map(friends => {\n                    if (props.data.friends.indexOf(friends) < 12 && props.data.friends.indexOf(friends) > 7) {\n                        return (\n                            <div onClick={props.shuffle} className =\"image-center\">\n\n                                <Picture\n                                    id={friends.id}\n                                    name={friends.name}\n                                    image={friends.link}\n                                />\n                            </div>\n                        )\n                    }\n                }\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./Navbar\"\nimport Jumbotron from \"./Jumbotron\"\nimport Game from \"./Game\";\nimport Friend from \"../assets/pictures.json\";\n\n\nclass App extends Component {\n\n  state = {\n    picked: [],\n    score: 0,\n    topScore: 0,\n    friends: Friend\n\n  }\n\n  shuffle = (event) => {\n\n    console.log(event.target.id)\n    if (this.state.picked.indexOf(event.target.id) === -1) {\n      this.setState({ picked: this.state.picked.concat(event.target.id) })\n      this.setState({ score: this.state.score + 1 }, function () {\n\n        if (this.state.score > this.state.topScore) {\n          this.setState({ topScore: this.state.score })\n        }\n      })\n    }\n\n    else {\n      this.setState({ score: 0 })\n      this.setState({ picked: [] })\n    }\n    var newFriends = this.state.friends\n    for (let i = newFriends.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newFriends[i], newFriends[j]] = [newFriends[j], newFriends[i]];\n    }\n    this.setState({ friends: newFriends });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <Navbar  /> */}\n        <Jumbotron topScore={this.state.topScore} score={this.state.score}/>\n        <Game shuffle={this.shuffle} data={this.state} />\n\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}